{"id": "fc76vg", "title": "Why does StratifiedShuffleSplit create NaN values?", "url": "https://www.reddit.com/r/learnpython/comments/fc76vg/why_does_stratifiedshufflesplit_create_nan_values/", "subreddit": "learnpython", "author": "t2_15fypqf4", "text": "I am following 'Hands-On Machine Learning with Scikit-Learn and TensorFlow' but using one of my datasets.  \nIt's the first time for me being exposed to  StratifiedShuffleSplit, can someone explain why it 'creates' NaN values as there were none in the dataset that was fed into it?  \n[Screenshot](https://i.imgur.com/bExdrzW.png).  \n\n\nI guess I am doing something wrong.", "comments": [{"id": "fj9df6m", "author": "HarissaForte", "body": "Could be a difference between pandas indexes (the line \"names\") and the indexes given by the split (the line number). So using `reset_index` to make sure both match might be useful.\n\nAlso I haven't used pandas `reindex` but in the doc I notice:\n> Places NA/NaN in locations having no value in the previous index.\n\nSo I suggest you try using a good old `df[train_index]` just like in scikit-learn's doc."}, {"id": "fj9di12", "author": "CaseZ", "body": "df.reindex(train_index) adds the current split as new indices with NaN as values.\nJust use normal indexing: df[train_index]"}]}