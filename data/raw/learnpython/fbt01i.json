{"id": "fbt01i", "title": "How to not feel like giving up when it takes you 1+ hour to finish a problem other people average in 5 minutes?", "url": "https://www.reddit.com/r/learnpython/comments/fbt01i/how_to_not_feel_like_giving_up_when_it_takes_you/", "subreddit": "learnpython", "author": "t2_56c4x3ik", "text": "Yeah sorry, it's one of those threads.\n\nI'm doing the [JetBrains Python curriculum](https://hyperskill.org/curriculum) which is amazing and I highly recommend. The first part of the course I went through really quickly, but after getting to while/for loops and so on, it's starting to take me even over 1 hour to solve a single challenge.\n\nThe most disheartening thing is that JetBrains shows the average time completed for most of these problems to be roughly 5-10 minutes.\n\nI find myself getting close to creating a solution and then somehow I wind up going in a direction that is further and further away from the result. Then I don't know what position to return to where I was the closest to finding a solution.\n\nI'm not terrible at maths or logic (though I guess I'm contradicting myself with this evidence), but I just can't get my head around some of these questions.\n\nBy now I've been learning Python for 3 months via various sources (Udemy, Youtube, Team Treehouse, etc) and by now I've touched on most things, so I'm not totally 'fresh' to Python but I'm not advanced enough to e.g. use decorators and classes confidently. Also I realise that practice makes perfect which is why I've spent the last 4 days, no exaggeration what-so-ever spending about 10 hours a day doing these exercises and refusing to give up. The fact that they are now taking me an average of an hour to complete each, and this whole track of over 140 exercises should take only up to 30 hours. It's killing my confidence. Furthermore, sometimes it just feels like pure luck that I managed to write a working solution to a problem, rather than me actually fully understanding what I was required to write.\n\nWhat do other people do in this situation? I know I can postpone the question and come back later, but that increases the chance of getting a future question for which I haven't learned a prerequisite. Of course I'm trying to be positive by reminding myself that even if it took me an hour, I still got there in the end but it kind of isn't enough if the amount of times I felt stuck was more than the amount of times I felt like I solved the question in a reasonable time-frame.\n\nHonestly, as much as I love Python and can be really good at it. After getting bogged down this heavily, I feel like I'm out of my league. Like the language is built for things that are way too math orientated for me...\n\nApart from taking regular breaks and walks and not giving up. Does anyone have any tips? I really still want to master Python.\n\n________________________________________\n\nEDIT: Wow guys. Let me start by saying thanks to every single person who replied to this thread. This is truly an overwhelming response; honestly, I expected that this thread wouldn't even get approved. To come back to it 11 hours after I posted it and after having spent another 10 hours for the 4th day in a row practicing, and see something like 300 comments. I'm really grateful for everyone's effort in replying and sharing their hard earned wisdom!\n\nTo clarify, I solved the problem that was responsible for me making this thread. I'd solved what must be hundreds like it before, but this one in particular just stumped me so hard I found myself here. It took me just over 4 hours. So a lot longer than 5 minutes. But I did it on my own, without cheating or copy/pasting and I did learn, A LOT. In fact, I guess the real irony here is that even though you'd naturally expect what you learned during those 4 hours spent on a single problem, couldn't justify the time it took. Actually, it feels like I got 4 hours worth of the same degree of knowledge that I would have got if I had solved 4 questions in 4 hours. Additionally, I got to see the solutions from others (when you can only do on Jetbrains after you post one that passes yourself) and I learned a lot just from looking at them. I studied them really intently and almost immediately I found myself smiling and thinking *\"I did that bit like he/she did last time, why did it take me so long this time?\"*\n\nI know I could have asked here or on Stackoverflow or a dozen other places. I guess the reason I didn't was because I spent so long at a stage so close to the solution. Obviously at that point the best thing to do is take a break or get a second opinion/set of eyes to look over it in order to iron out the last bit. I'll definitely do that in the future. At the end of the day, if asking others helps me learn faster, then it means I'll be able to help others faster myself.\n\nTL;DR - Thanks again to everyone, I'll take all of it in and work on ways of streamlining my planning and execution processes. I wish you all the best with your own endeavors.", "comments": [{"id": "fj6c30d", "author": "PMMeParkingTickets", "body": "*You don't know who those other people are.*\n\nWhen I play basketball I don't compare myself with NBA players. When you code, code against yourself."}, {"id": "fj6avh0", "author": "toastedstapler", "body": "so the first thing to remember is that even if it takes you an hour, you've learned how to do it\n\nare you able to see the solutions of other people? if so, give those a look once you've done it. see how they do things the same/differently and work out how what they're doing works\n\ni'm not sure what your process is, but take time at the start to think through how you'll solve it before you write code. i know it's tempting to jump straight in but often it's worth sitting back for a minute rather than spewing out spaghetti code straight away\n\nis there anything in particular you're having trouble with?"}, {"id": "fj6caa7", "author": "jimmythenewsmith", "body": "This is not a python problem, it's a human problem. There are no shortcuts:\n\n1. practise, perseverance, study,  time invested, learning from others who are better than you will increase your skills.\n2. Start small, build on that. It's like maths, First counting, then adding, the multiplying, then dividing, then calculs, then quantum phyiscs, in that order. Make sure you learn the basics first\n3. Random tutorials are not an ideal way to learn, as helpful as they may be, structured courses better, [MIT Edx even better](https://www.edx.org/course/introduction-to-computer-science-and-programming-7). You have probably missed the current class but you can have a look and pick up the next one\n4. Accept that humans are all different. You may just not have an aptitude for programming or python. It may ultimately not be worth your time, or maybe you just want to stick at a modest level suiting your ability\n\nThere is an old joke: a man in New York is on the way to a concert but he's lost so he asks a stranger \"Do you know how to get to Carnegie Hall?\", to which the stranger replies, \"Practise, man, practise\". So it is with anything."}, {"id": "fj6ftys", "author": "AndreiXM", "body": "it only takes other people 5 minutes because they already spent that 1 hour trying to do it before"}, {"id": "fj6blo0", "author": "mimic_1999", "body": "I didn't know about jetbrain academy. thanks!"}, {"id": "fj6eren", "author": "OG_Panthers_Fan", "body": "Source:  Software Developer for 30 years.\n\nSometimes, I get so deep into a problem that I can't see the solution.  Usually, this is after several iterations of trying things, and slowly getting off point as I try to find a solution to the an attempted solution that *almost* worked.\n\nI've beaten my head against a wall for days trying to find out why things aren't working.  This is one of the most frustrating things about my job.\n\nOften, the best thing for me to do is step back and look at the original problem.  Take a deeper look at that and define the *problem* better.  Try to see how to fix *that*, instead of trying to fix problems halfway down the wrong path.\n\nI would go back and redo some of the earlier lessons.  Sometimes, we learn a tool, but don't see the full potential until later.  This may be part of what's going on: Now that you're struggling, with a *different type* of problem, going back and revisiting the things you already know might let you see them in a different light.  e.g. Something may be useful in a way that you didn't consider when you first went through it.\n\nThen, of course, there's the rubber duck method.  In my office, my coworkers and I often bounce problems off each other to get input and find solutions.  But the fact is, 80% of the time, the mere process of clearly defining the problem while explaining it to someone else makes it clear enough to see a solution.\n\nAnd that's where a literal Rubber Duck  comes into play.  Explain it to the duck.\n\n\nAll of the above said...   Some of the best things I've ever learned have been through trial and error.  Failures teach me how *not* to do things.  Reading and fixing other people's code teach me alternate solution paths... and often, how *not* to do things.\n\nI would by no means give up; your in the middle of what seems to be the hard parts for you, but getting through it and learning those lessons are gonna feel really awesome.\n\nBecause... gotta say: when you finally \"get\" something that's hard?  There's no better feeling."}, {"id": "fj6b159", "author": "taostudent2019", "body": "Unless you are in school, it is not a race.\n\nI own a software company, and when I look for engineers.  I want the slowest moving candidates.  \n\nI'm looking to hire Flash from Zootopia."}, {"id": "fj7l94s", "author": "Visual_Bread", "body": "School psychologist here with some learning and intelligence theory.\n\nLearning occurs in 3 stages: acquisition -> fluency -> generalization. Acquisition is the most labored, where you are just learning how to do something. This involves books, trial and error, googling, tutorial videos, consulting stack overflow, etc. Fluency is when you know how to do the thing, but are working on doing it at a faster rate. Generalization is higher order, and where you apply previously mastered skills to new problems (\"Oh, making a gameboard might be easier with arrays\").\n\nIn self taught programming, it's important to note that what you are learning isn't \"programming\", it's individual problems (like the ones you working through). Each new problem, is another thing that needs to be passed through the acquisition/fluency/generalization pipeline. With each new problem, you are basically starting from scratch each time. That's okay. That's how it is supposed to work.\n\nIn terms of intelligence theory, intelligence can be broken down into different clusters of processes. In order of general importance, they are: crystalized, fluid, short term memory, processing speed, long term memory, visual/spatial. Most of these are inate and relatively unchanging. Crystalized intelligence is not. It is straight up your general knowledge store, and changes when you acquire new knowledge.\n\nWith each new problem you work through, acquire and gain fluency in, you are effectively adding a new \"programming knowledge\" bit in your brain. The more of these you accumulate over time, the more likely your brain will generalize this information, making it easier to acquire new skills.\n\nSo here is my general advice to you:\n\n* When problem sets say \"this should take you X hours\", assume that that estimate is with fluency in mind. If you have not reached fluency on those problems, then it necessarily will take you much longer.\n* Disregard \"average completion times\". Quality learning involves engaged exposure to the curriculum, not getting the right answer fast. Some people, when they do self learning, THINK they are learning by looking up the answer right away (this is even encouraged by programmers). I suspect that some newbies google \"how to while loop\", copy and paste, and move on. Yes, the complete it in 1/20th of the time you did, but they didn't learn anything by doing that. A funnier metric is looking at overall users and viewers dropping as lessons go on. Maybe it's not how fast you do problems, but the time and effort you put in that carries the day.\n* When you get a problem right, change it up slightly 2-3 times for yourself. This gives you extra self-generated (therefore meaningful; therefore more solidifying) expsoure. For me, after getting a while loop to work for the first time, I went back to see if I could embed another while loop in the main loop, make it work with \"while True\" and \"while X > 4\" syntax. I moved around my variables to see if these subtle changes screwed anything up or not. Yes, this means I didn't move on from while loops for a while (ha a pun), but it does mean I learned more, and now I don't fear them anymore.\n* Monitor what you are actually doing when you are doing these 10 hour sessions. There is a misguided belief that looooong learning sessions are inherently good. This, in my non-professional opinion comes from a place of machismo and glorification of excess in many pockets of our culture. Good learning sessions are approximately 1 hour for adults. After that, attention drops, and you're mainly just staring at the work or existing in a room with a book. When you learn, you should be making a thought out plan, and testing out your different ideas (\"Hmm, there are 5 things I could change about this while loop to get it to work. I can move that variable outside the loop, or add a break statement here, or have it break conditionally, or add a continue statement here, or some combination of these.\") That's good self-directed learning. Again, that takes longer, but that's actually what's going to solidify the material for you. And you can really only keep up that kind of thinking for about an hour before you just can't anymore."}, {"id": "fj6k3uu", "author": "thebassoonist06", "body": "Keep at it dude.  It took me a solid 6 months away uni to really wrap my head around classes. I just accepted that i was a slow learner,  and i had already committed and wasn't about to lose my investment. \n\nI was lower middle end of my class and it was terrifying to look for a job. But i did, and now i make a pretty comfortable living. People need developers, and perseverance is actually a huge pro.  A lot of people don't pick up new ideas quickly and have to put in the time to learn."}, {"id": "fj71qeh", "author": "dipping_toes", "body": "It always reminds me of the story about the woman who approached Picasso in a restaurant, asked him to scribble something on a napkin, and said she would be happy to pay whatever he felt it was worth. Picasso complied and then said, \u201cThat will be $10,000.\u201d\n\n\u201cBut you did that in thirty seconds,\u201d the astonished woman replied.\n\n\u201cNo,\u201d Picasso said. \u201cIt has taken me forty years to do that.\u201d\n\nThey solved them in 5 minutes plus a hidden 20 years of experience."}, {"id": "fj6gbgg", "author": "crashfrog", "body": "Just by the pigeonhole theorem, most people learning a programming language aren\u2019t learning their first language. Thinking like a programmer is both highly portable from language to language, and extremely time consuming to learn for the first time, so that's why it feels like your competition is years ahead of you - they probably are."}, {"id": "fj6gdrn", "author": "skateologist", "body": "Maybe realise that it is given for a lot of those competitors, that it is not their first rodeo? and that one day... One day, you may solve it in 55 minutes."}, {"id": "fj7hr8c", "author": "Knitcap_", "body": "It took me a very long time to do the first 6 chapters of automate the boring stuff (that's the basics like loops and dictionaries) and had to look up the solution almost every practice project. Once I got past that I'm going through a chapter every 2-3 days and I haven't had to look up the solutions for the past three chapters (I'm now at chapter 15). Just get the ball rolling and keep your momentum and things will start falling into place."}, {"id": "fj6de0y", "author": "stuaxo", "body": "A lot of those people doing it in really short times may already be professionals looking to brush up.\n\nAlternately:   I've been doing python for 10 years, programming for 20 and I am terrible at these kinds of tests, I haven't done the PyCharm ones, but I probably would not be in the 5 minutes category.   I refuse to take these kind of tests as part of an interview."}, {"id": "fj6d1ex", "author": "Non-equilibrium", "body": "im wondering what these problems involve. It cant just be writing loops(?).\n\nUsually beginners try to solve everything from scratch without realising theyve been solved before, your just supposed to learn the solutions and apply them. Thatd be my guess."}, {"id": "fj6iecf", "author": "CrazedIndividual", "body": "Everyone has to start somewhere"}, {"id": "fj6pn6z", "author": "CorgiAtom", "body": "One great tip i learned from Jordan Peterson was, compare yourself only to 'yesterday's you'. :)"}, {"id": "fj7gc1z", "author": "TheUltimateInfidel", "body": "There are a few things I'm learning to get over now I know these exist because these will inhibit your process. When you break past these, you can become limitless.\n\nFirstly, there is no rockstar programmer, if they exist, they're rare. No one posts their failures online. Think about all the tutorials people follow. The people making these have spent hours in the same spot as you and spent hours making the tutorial. Do you think people automatically know things? Part of problem solving is about being able to express ideas programatically, as in, being able to discuss things within the logical framework of a language. When you realise this, you appreciate the hard work.\n\nSecondly, you're just learning. A lot of people do this as a job and therefore have to be very, very good to justify their role. Imagine being asked by someone to justify your career. Also, if it was gonna be easy all the time then why would you hire anyone more advanced than a beginner? You are an individual and you learn differently from me and anyone else. \n\nLastly, what is programming? Programming, besides what the definition points to, is also the process of spending ages sitting down to figure things out. I have sat for many, many hours trying to resolve problems that are simple to me now and weren't back then. This is because I had an idea that I am terrible at my work because I can't do something straight away. It's like dysmorphia. You have to realise that part of what makes you a good programmer is the sheer fucking will required to sit down and focus on minute problems.\n\nHope this helps."}, {"id": "fj7gk88", "author": "DragonTreeBass", "body": "Well, maybe this can give some perspective. I\u2019m doing a similar type of course that shows how long it should take, and I\u2019m one of those people who tends to finish in 5-10 minutes. However, I already know Java. I\u2019m doing the course to learn the syntax and idiosyncrasies of python by practicing. I already know what a for loop is and how it works as well as things like nesting loops, and essential programming concepts such as that. If this is your first language it is COMPLETELY understandable it could take you some time. Programming is not easy, and I know I had many times learning Java where the solution was a single line of code that took me 30 minutes to figure out. Don\u2019t lose hope, don\u2019t stop practicing. If you keep working, you can do this (:"}, {"id": "fj7jiz3", "author": "JeamBim", "body": "Didn't read the post, but the people who solve problems in 5 minutes had to solve a LOT of problems over an hour to develop the skill and knowledge to solve them in 5 minutes. \n\nIf you feel slow and behind, you need to know that everyone better than you had to go through the same process, and everyone after you who has yet to begin coding will also go through that."}, {"id": "fj6bi7b", "author": "LunaticTIWARI", "body": "The phrase \"it took me 1 hour while others did it under 10 mins\" is just a weak mindset.\nIt takes time to master any programming language... Learn from other people solutions ... \nTry to write Pseudo Code for complex problems."}, {"id": "fj6di2b", "author": "stuaxo", "body": "Maybe this isn't the best way for you to learn python ?\n\nSome people thrive on this sort of thing, for others building something is a better way, building clones of early games like space invaders or breakout is good way to learn a language, pick an engine like pygame or pyglet and go at your own speed.\n\n&#x200B;\n\nOnce you've built something you can always come back to the tests, go one to build something else."}, {"id": "fj6gbew", "author": "nanno3000", "body": "maybe you should stop doing exercises and start working on real projects... If you have none, there are a ton of open source projects with open issues and feature requests that you could try yourself on. Otherwise computer vision with openCV is a great place to start and see some quick, usable results"}, {"id": "fj6ike7", "author": "SkippyMGee", "body": "What I\u2019m finding with this language is that you are learning a lot more in the initial phases from struggling through a project for several hours than speeding through it in 5 mins."}, {"id": "fj6j0ke", "author": "digitalpuzzlepieces", "body": "I'm about two months into learning Python as part of a college course. Current assignment is something that should've been completed a couple of weeks ago, but I am deeply stuck. After having chest pains the other night from the stress of not being able to solve it, I stepped away from the assignment. Now I'm doing the Python course in that Sololearn app to fill holes in my learning and get more exposure to terminology. \n\nSometimes we have to go back a bit to move forward. And that's perfectly fine."}, {"id": "fj6l6o9", "author": "Que888", "body": "I'm 7 months into this journey and have oftentimes experienced this feeling.\nI just continue trying not to bother because I want to reach my goal and I know I will succeed if I persist.\n\nBut being able to persist depends on how much you want it.\nSo ask yourself if this is what you want to do in life and act accordingly."}, {"id": "fj6pt3p", "author": "Kravakhan", "body": "You will be better than them, because u stood by the task for as long as needed, they may falter if they get a similar challenged. Also, don't forget people have different strength and weaknesses."}, {"id": "fj6puq6", "author": "evictedtomato", "body": "codecademy should help if you are willing to pay a bit"}, {"id": "fj6qmab", "author": "gizzm0-", "body": "Hey, I know the feeling. \n\nOnce it takes you an hour to do something go back and do it again, I guarantee it'll take you less time to get it done. That's how it works.\nAs for the average time, many have said what I'm about to say- that you might be going up against CompSci grads who are learning data structures and algorithms. \n\nAnecdote: Once you learn to write (memorise) sorting algos, for example, because they will be in your exams and you have to write that shit out on paper (like I did), trust me it sticks with you.. when you see a problem that remotely says \"given xyz write an algo that SORTS...\" I immediately go through the list of sorting algos i was forced to memorise. Makes it so much easier,band I can write it to suit the use case. THIS ISNT A BRAG, it's an explanation of why someone who has studied CompSci for 5 years and works in the field can do this stuff quicker.\n\nBe proud you did it in an hour, you should memorise it, optimise it and if you ever come up against a question like it again you'll write it in half the time or less. I promise.\n\nExperience: did an MSc in CompSci now I work as a data engineer/developer.\n\nEDIT::\nAny tips on how to get better quicker? No. You are at a disadvantage self studying, you don't have the pressure of needing memorise shit for deadlines.\n\nAny tips on what to do? Keep going. If you've done something and it took you an hour, make an effort of storing the information. Copy the solution into notepad++. Stack overflow for optimisation suggestions. Have a personal library of finished solutions and potential use cases for it. Think about how it applies in real life scenarios? How does your news feed get sorted? Standing in a queue think about FIFO and FILO.. you see someone leaving a queue? Think about .pop() think about n-1? That's how you become better in my opinion. Think about it constantly."}, {"id": "fj6si9i", "author": "omik1234", "body": "Same problem i am facing now. In the begin, alll the courses look interesting and sort of easy but after i lost my interest...."}, {"id": "fj6sinm", "author": "skellious", "body": "Exercises are not real world applications. Try making something you want to make in the real world and see if you can do it. That will be a far more valuable learning experience."}, {"id": "fj6xghm", "author": "michaelMATE", "body": "You get that feeling in others situations as well. As a musician, for example, you can get very frustrated / jealous when you see someone with better technique or smoother movements master a piece you're struggling to play.  But I guess it's part of the game, it's just an ego thing,\n\nI don't see programming or music as a competition. Sure, the more you practice, the better you get at it, but there will always be someone better and someone worse than you. Which is great! It means you can learn from one and teach to the other. (Which is a virtuous circle in the end)."}, {"id": "fj6ytb4", "author": "Nixellion", "body": "This is how how learning basically anything works, especially programming. You can bang your head against the wall for days trying to wrap your head around something, but at some point it finally clicks. After that you'll know how to do it and next time will figure out new tasks and concepts faster. At some point your base will be big enough that you'll be able to learn new things quickly. But there will always be new things to learn and some harder to grasp concepts."}, {"id": "fj7064f", "author": "jkoutso13", "body": "When you\u2019re learning any skill, it\u2019s way better to take a lot of time on something. I understand it\u2019s disheartening, but the people who finish it in 5 minutes are the people who took hours to do something similar initially. It all comes with experience"}, {"id": "fj70k5e", "author": "Ikuyas", "body": "You want to do challenging assignments. Those platforms give you easy tasks. You pay like $25 on edx to have access to cs50 on edX, which I highly recommend. You learn python as the last topic and you will build the decent web application with database. You need to do relatively challenging work with a plant of helps that are available if you need. Tutorial typed aren't that helpful to learn to figure out. They teach you recipe to build apps but it is hard to learn a skill to program."}, {"id": "fj718i3", "author": "Ikuyas", "body": "You are also using the curriculum wrong. That is helpful for an instructor to give students as assignment or after learning the core concept to apply. It will be highly inefficient to use like you do. In 2020, there are several highest quality MOOC type programming courses. There is no need to create your own way to learn programming. If you spend that much time on cs50, you can go through it probably in a month instead of 3-4 months and you will be 1000 times comfortable with programming."}, {"id": "fj71wjt", "author": "Yakhov", "body": "A lot of people can fire off some code and look smart but a lot of those people can't make the jump from knowing a language and then using it in a interesting way. I see many posts from folks who can't think of a project to use/practice their skills on.  We all have our strengths.  Point is the end user doesn't care how long it took you to write it so long as it works and does something they want to do.\n\nI've been learning code for around 7 months and it took me half a day to get an Object.entries routine working the way I wanted to in js.  next time it' will take me half that time if lucky.  However, in 7 months I've done many projects and as I complete one I have 5 new ideas for another."}, {"id": "fj73vwd", "author": "Ieatdapsy", "body": "Chech out sendex and tech with Tim on YouTube. They have some pretty cool projects and tutorials to get you going"}, {"id": "fj749mp", "author": "holyshititsonlythurs", "body": "Just keep poking away at it. Sometimes it takes awhile to just \"get it\", and that might entirely be based on how you are learning, and who you are learning from.\n\nI've been helping some coworkers with Python lately, and they ask me to stop over their desk for a second, and the conversation normally boils down to, \"I've been stuck on this for an hour, can you tell me what's going on here?\". A few minutes later and it's more clear to them. \n\nI used to be the same way when I started.\n\nThere's already been some good advice here, but if you can, try to find a Python users group in your area, or some form of collaborative and/or pair programming you can participate in."}, {"id": "fj762jq", "author": "slumpapan", "body": "Maybe you need to work on your problem solving skills in general. Have no idea what type of questions you're solving, though. In my experience breaking down complex problems into a series of easy steps is an ability that will make you do in minutes what takes others hours, days or even months"}, {"id": "fj7d6ev", "author": "u38cg2", "body": "Remember most of the people on any online tutorial thing will have some kind of prior experience, and coding productivity is 100% down to experience.  If you're ding this with no prior exposure, it will be hard work.  You're doing it the right way."}, {"id": "fj7g27d", "author": "franzipoli", "body": "Because next time it'll take you 30 minute"}, {"id": "fj7ols7", "author": "keturn", "body": ">Apart from taking regular breaks and walks\n\nI'm glad you mentioned that! When you said \u201c10 hours a day\u201d I got worried you were working *too much* on this. Consistent and frequent practice is important, but trying to push against exhaustion doesn't work very well for most of us. Especially when faced with new material.\n\nIt's good to work things out for yourself, but if you get to a place where you're feeling stuck for an *hour* (or even twenty minutes!), I am a big fan of **asking questions*****.*** Whether it's here or Treehouse or Discord or your local Python meetup or somewhere else.\n\n&#x200B;\n\n>\\[\u2026\\], rather than me actually fully understanding what I was required to write.\n\nI used to feel really bad about this. \"I wasted all that time on that code without understanding what I was doing! I should have made sure I understood everything earlier!\"\n\nuntil I learned more about how language acquisition works. How people learn human languages, not programming languages. That phase of copying things and muddling through well enough that someone can figure out what you're talking about *always* happens, it's part of the process. Deeper understanding will come later, but it's unlikely that you can just skip straight to that part.\n\nI think that learning process probably applies to lots of things, not just languages. So I hope you can avoid beating yourself up about it too much. Sure, if someone's contributing code to my mission-critical application, *then* I will press to make sure they understand what they've written. Until then, it's all good practice."}, {"id": "fj7po2a", "author": "Yogi_DMT", "body": "There may be people who have more talent than you, but there's no excuse for anyone to work harder than you do"}, {"id": "fj7qvh7", "author": "happensman", "body": "When someone's an infant, how long they learned to walk doesn't determine how fast they run when they're an adult. The same logic applies to learning to code/program."}, {"id": "fj7r50z", "author": "ThatGuy097", "body": "Short Version: Give yourself some slack, we're learning and this is part of the process.\n\nI'm two months into this adventure and often spend two to five hours on certain problems (not counting the time spent away from the keyboard thinking through the challenge).  Iterating through lists of lists is my current anethma and it's frustrating, for sure, but you have to keep chipping away at it.\n\nGood luck!"}, {"id": "fj7rpn8", "author": "covah901", "body": "For OP's reason I have not been able to finish a single Python textbook. I start off pretty good then I start to feel progressively more and more lacking. I learn better by understanding mechanics (so I think at least) but it seems coding requires that you memorize a lot more? For example, I did the chapters on lists and dictionaries and now they've fallen out of my head completely. It seems like an endless cycle of revisiting the starting chapters, which is very daunting. On the other hand, I've been able to learn other technical things that some people in my day to day life marvel at, like PC building, and designing and putting together custom keyboards. I don't know why I'm stuck so hard on learning Python."}, {"id": "fj7s9su", "author": "shaggorama", "body": "Maybe you'd feel better doing an in-person learning program."}, {"id": "fj807u9", "author": "Phainesthai", "body": "This thread gives me hope"}, {"id": "fj83zia", "author": "WatchMeFall10Stories", "body": "I think one way to look at it is, if it takes 1 person a day to learn it, but it took you a week. In the end you both know it. Nobody is going to ask how long it took you to get it."}, {"id": "fj8aalo", "author": "Shizzle44", "body": "Once you've done it once, the next time will take only five minutes!!"}, {"id": "fj8ael1", "author": "ivosaurus", "body": "Remember when you finished the problem,  there are probably many people who gave up instead.  Or they looked at it, after thinking \"yeah programming that'll be easy money\", thought they couldn't get it in 15 minutes, and went away and did other shit. Or went and looked at answers, typed up something almost copy and pasted, and convinced themselves they'd solved it. \n\nYou've beaten all those people hands down by default every time you finish another one.\n\nTime and persistence usually ends up working in this world."}, {"id": "fj8eovr", "author": "ToBeat_ELIT3", "body": "I can\u2019t say much except keep at it and good luck \ud83d\ude09"}, {"id": "fj8ncrr", "author": "waldosan_of_the_deep", "body": "It's a language, not just a skill, you're not just teaching yourself how to write in that language you're also teaching yourself to think on that language. When someone learns another language they literally change the way that they think to accommodate the new language. It's not always going to be easy but if you stick with it you'll get better, just remember it's a way of thinking not just a way of doing things."}, {"id": "fj8symz", "author": "panupatc", "body": "I often got stuck on my code which needed days to figure out. It can be very stressful but man, the moment you resolve it, nothing matters anymore. It's the best feeling in the world. I just want to go home and brag to my wife about it but knowing she wouldn't understand I never actually really brag."}, {"id": "fj8uo31", "author": "unspezifische", "body": "I'll throw my two cents in, although I'm sure others have said the same:  \n\nYou've already got the \"don't give up thing\" going, which is the first step. Like you said, practice makes better. I would add to that *correct* practice makes better. It doesn't matter how many times you practice throwing an incorrect punch because when the time comes to execute, you will do so flawlessly.... and break your hand doing it. Practice the important parts. And in this case, I would say \"sweat the little stuff so you don't sweat the big stuff\". Study for loops and while loops until you know the similarities and differences like you do your own two hands. Write little programs that practice them. When I first learned Python, it was in a classroom setting and every class I would follow along with the examples and try them on my own. I'd mess around with each new thing and break it. See what its limits were. What I could use it for. Then at the end of the lesson, I would save all of that to a file I could reference as notes later.\n\nThis inevitably gets mentioned every time someone is on here asking for help, and I think it is great advice: learn how to break your project into bite-size pieces. Learning how to the goal of your program and break it into a step0by-step process (the algorithm you are gonna follow) not only makes the project less daunting, but it is easier to get help on a single step. Finding out how to verify user-input is easier to figure out once you realize that you need input from the user, as a bad example.\n\nI was one of the lucky kids to learn Python back in middle school. I messed around with it during high school but never really increased my fundamental understanding, just kept remixing the same stuff I knew to make new projects. That entire time, I had this imposter syndrome because, yeah, I knew more about programming than my high school classmates who had never done it, but once I started comparing myself to friends from that programming class, I was *awful* at it. Thankfully, in college I got to take a Python class and finally began to learn about writing functions and classes. Stuff that a \"real programmer\" should know. And I'll tell you this: the first half of the class was a breeze for me. It was covering stuff I already knew and had kept fresh through high school. Super easy review. And the second half, with all the new material? It wasn't super hard either because I had already spent 6 years learning to *think* like a programmer. So all the new tools I got, the new tricks I learned, applying them was simple once I understood what they could do and how to make them work for me.\n\nSo you'll get there. Hopefully it doesn't take you 6 years to finally feel like a \"real\" programmer, but if you need help along the way, the subreddit, Stack Overflow, and of course the Python Docs are great resources to help you out if you hit a rough spot on a project!"}, {"id": "fj8w3z4", "author": "homedoggieo", "body": "Can I ask how old you are? Comparing yourself with others is something that kind of fades with age. When I was 18, I was super anxious that I wasn't keeping up with other people, but now that I'm 30, I just focus on learning for learning's sake."}, {"id": "fj92hp2", "author": "Nacho_Overload", "body": "Are you willing to do what it takes to learn Python, even if that means taking 6-12 times longer to get results?"}, {"id": "fj98pe8", "author": "tomtsonghum", "body": "https://i.imgur.com/2jvkNoK.png"}, {"id": "fj99qvh", "author": "makedatauseful", "body": "Forget about them! I make YouTube videos where I whip up web scrapers in python in about 5-15mins. That took hundreds of hours of practice trial and error and giving up and coming back 10's of time. Stick with it and focus on how much better YOU are to last week, month, year."}, {"id": "fj6d4io", "author": "steamed_water", "body": "Luck is a huge part of how programmers solve problems. Once you've stumbled upon a solution that works, really analyse it. Log your variables in the solution with print statements so you understand the states of your program and how it changes."}]}