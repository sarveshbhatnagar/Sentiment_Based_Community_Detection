{"id": "fc49xv", "title": "Using argparse without a stupid amount of add_argument() method calls?", "url": "https://www.reddit.com/r/learnpython/comments/fc49xv/using_argparse_without_a_stupid_amount_of_add/", "subreddit": "learnpython", "author": "t2_t0zeq", "text": "I want to store a args in a file called \\`[lib.py](https://lib.py)\\`. Ive considered storing them like:  \n\n\n    args = [[\"-gp\", \"--generate-proxies\", 'Use the gen_proxies() function'],\n           [\"-lf\", \"--load-proxy-file\", \"Load proxies from file (one address per line, in an IP:Port format)\", 'string'],\n           [\"-t\", \"--threads\", \"Specify how many threads to use\", 'int'],\n    ]\n\nand doing something like this in the main program:\n\n        parser = argparse.ArgumentParser()\n        for arg in lib.args:\n            parser.add_argument(arg)\n        args = parser.parse_args()\n\nbut that doesn't work. Now, if each of these lists were identical in size, that would be fine. I could simply use the indexes to pass the help, type, etc. parameters.\n\nbut they aren't. \\`--gp\\`/\\`--generate-proxies\\` doesnt NEED a type because it doesn't take a value. That makes it an element shorter, which would mean some janky workaround.   \n\n\nSo my question is: Can I iteratively add arguments in the form of a list, nested list, dict, etc. or do I really have to do a manual \\`add\\_argument()\\` method call for every single argument.", "comments": [{"id": "fj8ibrb", "author": "teerre", "body": "First is, I'm not sure why would you think this would be such a big work since you'll only be doing it once and you shouldn't be changing your cli arguments that often.\n\nThat aside, `argparse` has no notion of where your arguments are coming from, as long as you pass then correctly, it will work. Look at the documentation for `add_argument`, `help` is a keyword argument. So you must pass it like that. That is `.add_argument('foo', 'bar', help=\"Some help\")`."}, {"id": "fj8v01d", "author": "Se7enLC", "body": ">I want to store a args in a file called `lib.py`\n\nTry not to want that.\n\nFewer lines of code does not mean better code."}]}