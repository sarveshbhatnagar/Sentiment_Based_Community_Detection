{"id": "fc2g4s", "title": "OOP: Avoiding overlapping method and attribute names", "url": "https://www.reddit.com/r/learnpython/comments/fc2g4s/oop_avoiding_overlapping_method_and_attribute/", "subreddit": "learnpython", "author": "t2_hhqn2", "text": "This is an open-ended question, but do you have any advice for not accidentally creating methods and attributes with the same name?  Over-simplified example would be:\n\n    def url (self, link):\n        self.url = link\n\nObviously, I shouldn't do that and name the method \"set\\_url\", or something. Is there a tool to check for overlapping method/attribute names? Maybe that's an IDE specific question?\n\nAny tips and tricks to keep the method names separate from the attribute names?", "comments": [{"id": "fj84e3y", "author": "blarf_irl", "body": "You should look at the property decorator if you think you need getter and setter functions\n\n    class Scraper:\n    \n        def __init__(self, path='index.html'):\n            self.path = path\n            self._url = None\n        \n        @property\n        def url(self):\n            if not self._url:\n                return f'https://example.com/{self.path}'\n            return self._url\n    \n        @url.setter\n        def url(self, link):\n            # edited again to show the value of using the decorator\n            # We can perform logic on the value and still access it like an attribute\n            if link.startswith('http://'):\n                link = link.sub('http://', 'https://')\n            self._url = link\n    \n        def clear_url(self):\n            self._url = None\n    \n    s = Scraper()\n    print(s.url)\n    s.path = 'page_2.html'\n    print(s.url)\n    s.url = 'http://reddit.com' # note not httpS\n    print(s.url)\n    s.clear_url()\n    print(s.url)\n\nuse the property decorator when you want to compute the value of an attribute"}, {"id": "fj88bs7", "author": "crashfrog", "body": "I generally don't find this to be a problem - linguistically, attributes are usually nouns (since characteristics are nouns) and methods are typically verbs, and English has relatively separate namespaces for those."}, {"id": "fj88nd4", "author": "Binary101010", "body": "You shouldn't need a tool if you follow good naming practices: attributes should be nouns, and functions should have a verb in their name that describes what they do.\n\nThat said, \"getters\" and \"setters\" are widely considered unPythonic, so if you're writing a function whose sole purpose is to set an attribute, and the function isn't doing any other kind of validation on that  input, just directly manipulate the attribute without ever writing the function."}, {"id": "fj83fg4", "author": "Starbuck5c", "body": "I haven't ever really had problems with that.\n\nOne trick would be to label internal variables with a leading underscores\n\n    def url (self, link):\n        self._url = link"}, {"id": "fj8nikp", "author": "further___reading", "body": "Writing human readable code fixes this issue for you. \n\nYour attributes should be nouns since they are just values attached to your object. Your methods should have verbs in them since they are actions performed by or on the object. Since your attributes won't have verbs in them you can't overlap.\n\nIn your example URL is a noun so it shouldn't be a method name. Your method name should describe what your method does. Your method **sets** the value of the **url** attribute, so its name should be something like set_url."}]}